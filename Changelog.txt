Performance Enhancements (7.21.24)
--Added IActor and removed Actor, there was no need to have that inheritance.
--Added CreateBackground, CreateTile, to ActorManager, will add more soon.
--Changed the remaining actors to inherit IActor, everything works fine.
--Enhance overall performance, Henesys used to take about 3.5 seconds to load, now it's about 1.5 seconds.
--Wrapped the update function in a Task, so that it runs individually from the rest of the application.

Began Login work (7.19.24)
--Separated loading from the world class into a MapLoader class.
--Streamlined creating worlds to wait till it's done loading.
--Changed a few things in MapObject class.
--Started the process of creating a world state.

Back to the client (7.18.24)
--Added OneTime/Counted animations
--Added Blended animations (kind of weird for now)
--Added LoopAnimation for all others.
--Fixed an issue where the animated objects was not properly loading for login screen.
--Fixed an issue where the animated backgrounds were not loading properly for login screen.

Snip-it (7.14.24 to 7.17.24)
--During this time I create a WZ library that works together with the NX
library I create, so they can be seamlessly swapped. I will not be pushing 
neither of those updates to this Repo, those will remain private.

Networking, Actors, Wz Parsing (7.14.24)
--Began restructuring the networking system, I use my own server so there's no guarantee that
it'll remain compatible with other servers, but I will do my best to keep it consistent.
--Began restructuring the actor system, now that there is something that works as it should,
I'm going to start restructuring it so that it will work with the networking.
--Began working on a WZ parser, because why not?
--Renamed RecvOps and SendOps to match what their packet is called.

Nothing Much (7.13.24)
--Added a CreateLogin function to the WorldManager
--Added UI nx to the NxManager
--Added clearing of the two lists in the player class, oops
--Added condition checking if the player is in the ladder state
--Removed ref out of Background

Character Updates (7.12.24)
--Added AvatarLayers, this will be used later one when equipment comes into play.
--Added Character flipping on the X-axis, not perfect but it works for now.
--Added the remainder Body types to the enum.
--Added an AvatarState enum to make it easier to shift between states without knowing the name.
--Added a possible state list so that you know the difference between states and actions.
--Added a frame count list, that you know exactly how much frames are in each state.
--Added Character movement, pretty fast for now. 
--Added Character StateChange upon specific movement.
--Added simple, not complete, detection if the character is on a ladder, so it only updates the character when the player moves.
--Added a camera update function to the world manager, since it should handle these sort of things.
--Separated the Origin and Positions of the actors, it was getting a bit confusing.
--Changed how the player is initiated, all states are loaded prior. Then the default is set.
--Changed the ChangeState method, so it picks a state instead of creating one.
--NOTE: All these lists (i.e. AvatarState, possible states, and frame count) ARE ONE TO ONE, if you even touch one of the values it will mess everything up. So be careful.
--Fixed an issue with animation cycling (a test I ran to make sure everything works). All animation now work as the should.
--Fixed an issue where the textures weren't clearing correctly in the player.

Character & Map Update (7.11.24)
--Added RayGui stuff into the client.
--Added Face into the player, bodytype, and bodypart.
--Added separate update methods for body and face, still needs to be touched up a bit.
--Added a special case for Character.nx in the ReadNodeData method, it now grabs the appropriate nodes.
--Added a command window, it's going to be used for debugging, changing/adding stuff dynamically, once things get much further.
--Added BodyPart code that encompasses all cases, for now.
--Added BodyType enum
--Added Arm struct to handle the arms of the player
--Added Clear method to Body, Head, Arm classes, to release the textures.
--Added a check where the state doesn't need the face rendered.
--Added random delay to the blinking, it's kind of fast right now, but it works.
--Fixed an issues where the wrong values for the state were being called
--Fixed an animation issue for both MapObjects and the character where the last frame was being skipped.
--Fixed the positioning of all body parts of the player.
--Changed the ActorManager so it only detects actors that can be click on, not all of them.
--Face renders correctly, for now. Had to use an Abs function, which I'm not sure if that's correct.
--Removed Arm, Body, Head classes.
--Removed ResourceManager, not useful right now.
--Removed Obstacle class, not needed right now.

Experimental Avatar  (7.10.24)
-- Added ActorType to differentiate between the different actors
-- Added Body, BodyPart, and Head to handle the creation of the player body for now
-- Added the Player class which encompasses the whole body
-- Added a GetPlayer method to ActorManager
__ Made it so you can see the children in the node, in case you need the names instead of the count.
-- Added a test player to the world class
-- Changed how the world class is initialized so it makes more sense now.
--Fixed an issue with other states that caused the client to crash.
--Fixed an issue with the animation (Player/MapObject) that was iterating correctly.
--Separated the different body rendering for efficiency.

Small changes (7.8.2024) 
-- Removed the IComparable from the Actor class, not point having it there.
-- Changed the actor dictionary to contain a List instead of a sorted set.
-- (Possible Bug) Fixed the sorting, for now. It's hard to say since everything isn't there yet.
-- Added a SortAll List, to sort everything once it's there to reduce sort calls.
-- Fixed the issue with animated objects not being sorted, turns out I didn't even assign the order or layer.

Rebase (7.1.24 - 7.7.24) 
-- Decided to take a different approach.
-- Removed FNA support, amazing library, but lacks the features needed to properly emulate MS.
-- Removed all files, literally.
-- Added Raylib-CSLo
-- Added Networking Support (doesn't use encryption)
-- Added NetworkManager
-- Added ActorManager
-- Added Tile loading
-- Added Object loading
-- Internal structure changes.
-- Made it so each layer is their own-sorted set, having different set allows easier transferring between layers.
-- Fixed the frame time calculation.
-- Added background loading, nothing special yet.
-- Added an animated boolean to both MapObject and Background
-- Added a Has method, without the out variable to the NxNode.
-- Added a camera to the world, this will be the primary camera, nothing special yet.
-- Fixed an issue where the maps were unloaded twice.
-- Fixed an issues where the animations were taking forever to update.
-- Found an issue with the sorting system, will fix later.